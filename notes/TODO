

GENERAL TODO:

- brainstorm app items, tables and schema, architectures
	- user
	- word
	- typing_test
	- achievments

X build user auth
	X user table
	X authentication backend architecture
		X jwt tokens
		X limit some API endpoints to authed users
		X consider other authentication problems
			X ex. user should only be able to edit their information and no one
				elses (achieved with tokens)
	X authentication web client architecture
		X limit some pages to authed users

- build WPM typing test
	- get_wpm_typing_test() GET endpoint
		- possible params: difficulty, test length
		- fetch words from db
		- build test and return
		- perhaps store pending tests in db or cache
		- choose whether or not test results calculations are done on FE or BE
	- submit_wpm_typing_test() POST endpoint
		- send all words and timings
		- store test_result with user_id
		- think about ways to prevent forged requests cheating

- build user profile
	- user status, activity, achievements
	- summary of user test stats
	- graphs of progress
	- test history
	- test are viewable with granular information display

- build user community
	- profiles of other users are viewable
	- other users can be followed/friended


USER AUTH TODO:

X stub out classes and methods
	X user_data_object
	X user_auth service
	X user_auth_api
		X signup()
		X login()
		X refresh_token()

X research JWT authentication
	X how to use with flask and Blueprints?
	X look into method decorators for enforcing auth on endpoints

X create user mysql table
	X draft schema

X implement backend

X implement web client
	X signup view
	X login view
	X user auth service
	X token keeping
	X user service (holds user data)
	X prevent navigation to certain views if not authed


WPM TYPING TEST TODO:

- gather word library
	X download/scrape from sources
	X possible rating systems: difficulty, popularity, length
	X searchable by letter contents

- test builder
	- possible params: difficulty, length
	- build offline with cron?

- test assignment to user
	- pending tests await results from client

- receive and store test results
	- how granular?


USER PROFILE TODO:

- user information
	- track activity
	- track achievements
	- track test history
	- aggregate test data for summary


USER COMMUNITY TODO:

- profiles of other users are viewable
	- web client should present stranger user profiles differently than owned

- other users can be followed/friended
	- consider system for storing user follows





















