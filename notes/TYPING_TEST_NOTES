

GENERAL
- think about wpm typing test
	- datastores
	- backend architecture
	- interfaces
	- data aggregation
	- frontend display


WORD DATA

X build word corpus
	sources:
		- https://wordnet.princeton.edu/download/current-version
		- https://github.com/first20hours/google-10000-english
		- http://www.newgeneralservicelist.org/
		X https://www.wordfrequency.info/
		- http://www.insightin.com/esl/
		- http://www.natcorp.ox.ac.uk/
		- https://en.wiktionary.org/wiki/Wiktionary:Frequency_lists
		- https://corpus.byu.edu/coca/
		- http://norvig.com/mayzner.html
		- https://www.quora.com/Where-can-I-find-a-list-of-the-10-000-most-
			important-English-words
		- http://martinweisser.org/corpora_site/word_lists.html

X word attributes
	X characters
	X part of speech
	X length
	X frequency (usage rank)
	X keyboard difficulty

X queries for word search:
	X contains substring
	X within length min and max
	X within freq rank min and max
	X within difficulty min and max


WORD DIFFICULTY CALCULATION:

X difficulty score by key:
	X range 1-3 maybe convert to 0-1 or 0-100
	X easiest = home row, hardest 'B'

X key difficulty scores:
	X1. home row (ASDFJKL;): 1
	X2. top easy (WERUIO): 1.5
	X3. index in (GH): 1.75
	X4. lower easy (CVNM): 2
	X5. top medium (TY): 2.5
	X6. outers (QPZX): 2.75
	X7. hardest (B): 3

X key combination score:
	X hand switch easier than same hand
	X finger switch easier than same finger

X key fingers:
	A:LP
	B:LI
	C:LM
	D:LM
	E:LM
	F:LI
	G:LI
	H:RI
	I:RM
	J:RI
	K:RM
	L:RR
	M:RI
	N:RI
	O:RR
	P:RP
	Q:LP
	R:LI
	S:LR
	T:LI
	U:RI
	V:LI
	W:LR
	X:LP
	Y:RI
	Z:LP

X Keyboard Service:
	X create keyboard from config
	X query keyboard for information about:
		X key character(s)
		X key position
		X key difficulty
		X key hand and finger


TYPING TEST ARCHITECTURE

	notes:
	Typing tests will be built from words and based on attribute query options.
	What makes up a typing test?:
		- typing_test_id
		- word_ids (typing_test_content table)
		- language
		- word_count
		- avg_word_qwerty_difficulty_rank
		- avg_word_frequency_rank
		- avg_word_length
		- (min and max for the averages too?)
	Typing tests will be fetchable and assignable to users. User assignments
	will create a user typing test.
	What makes up a user_typing_test?:
		X typing_test_id
		X user_id
		X status (pending or complete)
		X words_ids (map to user_typing_test_content table)
		X test_time
		X wpm
	user_typing_test_content attributes:
		X user_typing_test_id
		X word_id
		X position
		X attempted
		X completed_correctly
		X completion_time
	needed data objects (DB tables):
		X word
		- typing test (stubbed)
		- typing test content (stubbed)
		- user typing test (pending tests / test results)
		- user typing test content

	needed services:
		X word
		- typing test (stubbed)

	needed APIs:
		- typing test (stubbed)


TYPING TEST BUILDING

- build WPM typing test
	- get_wpm_typing_test() GET endpoint
		- possible params: difficulty, test length
		- fetch words from db
		- build test and return
		- perhaps store pending tests in db or cache
		- choose whether or not test results calculations are done on FE or BE
	- submit_wpm_typing_test() POST endpoint
		- send all words and timings
		- store test_result with user_id
		- think about ways to prevent forged requests cheating


TYPING TEST RESULTS

